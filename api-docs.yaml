openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/sliders/{id}:
    put:
      tags:
      - slider-controller
      operationId: updateSlider
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - image
              - slider
              type: object
              properties:
                slider:
                  $ref: '#/components/schemas/SliderRequest'
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSlider'
    delete:
      tags:
      - slider-controller
      operationId: deleteSlider
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseObject'
  /api/products/{id}:
    get:
      tags:
      - product-controller
      operationId: findProductById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseProduct'
    put:
      tags:
      - product-controller
      operationId: updateProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - featureImage
              - imageFiles
              - product
              type: object
              properties:
                product:
                  $ref: '#/components/schemas/ProductRequest'
                featureImage:
                  type: string
                  format: binary
                imageFiles:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseProduct'
    delete:
      tags:
      - product-controller
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseObject'
  /api/categories/{id}:
    get:
      tags:
      - category-controller
      operationId: getCategoryById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCategory'
    put:
      tags:
      - category-controller
      operationId: updateCategory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - category
              - category_image
              type: object
              properties:
                category:
                  $ref: '#/components/schemas/CategoryRequest'
                category_image:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCategory'
    delete:
      tags:
      - category-controller
      operationId: deleteCategory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseObject'
  /api/brands/{id}:
    get:
      tags:
      - brand-controller
      operationId: getBrandById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBrand'
    put:
      tags:
      - brand-controller
      operationId: updateBrand
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBrand'
  /api/banners/{id}:
    get:
      tags:
      - banner-controller
      operationId: getBannerById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBanner'
    put:
      tags:
      - banner-controller
      operationId: updateBanner
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - banner
              - image
              type: object
              properties:
                banner:
                  $ref: '#/components/schemas/BannerRequest'
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBanner'
    delete:
      tags:
      - banner-controller
      operationId: deleteBanner
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseObject'
  /api/sliders:
    get:
      tags:
      - slider-controller
      operationId: getAllSlider
      parameters:
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageSlider'
    post:
      tags:
      - slider-controller
      operationId: createNewSlider
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - image
              - slider
              type: object
              properties:
                slider:
                  $ref: '#/components/schemas/SliderRequest'
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSlider'
  /api/products:
    get:
      tags:
      - product-controller
      operationId: getAllProduct
      parameters:
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageProduct'
    post:
      tags:
      - product-controller
      operationId: createNewProduct
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - feature_image
              - imageFiles
              - product
              type: object
              properties:
                product:
                  $ref: '#/components/schemas/ProductRequest'
                feature_image:
                  type: string
                  format: binary
                imageFiles:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseProduct'
  /api/categories:
    get:
      tags:
      - category-controller
      operationId: getAllCategory
      parameters:
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageCategory'
    post:
      tags:
      - category-controller
      operationId: createNewCategory
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - category
              - category_image
              type: object
              properties:
                category:
                  $ref: '#/components/schemas/CategoryRequest'
                category_image:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCategory'
  /api/cart:
    post:
      tags:
      - user-controller
      operationId: addItemToCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseObject'
  /api/brands:
    get:
      tags:
      - brand-controller
      operationId: getAllBrand
      parameters:
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageBrand'
    post:
      tags:
      - brand-controller
      operationId: createNewBrand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseBrand'
  /api/banners:
    get:
      tags:
      - banner-controller
      operationId: getAllBanner
      parameters:
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageBanner'
    post:
      tags:
      - banner-controller
      operationId: createNewBanner
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - banner
              - image
              type: object
              properties:
                banner:
                  $ref: '#/components/schemas/BannerRequest'
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseBanner'
  /api/auth/signup:
    post:
      tags:
      - auth-controller
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'
  /api/auth/signin:
    post:
      tags:
      - auth-controller
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseJwtResponse'
  /api/users:
    get:
      tags:
      - user-controller
      operationId: getAllUsers
      parameters:
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageUser'
  /api/test/user:
    get:
      tags:
      - test-controller
      operationId: userAccess
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/test/mod:
    get:
      tags:
      - test-controller
      operationId: moderatorAccess
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/test/all:
    get:
      tags:
      - test-controller
      operationId: allAccess
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/test/admin:
    get:
      tags:
      - test-controller
      operationId: adminAccess
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/slider/{id}:
    get:
      tags:
      - slider-controller
      operationId: getSliderById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseSlider'
  /api/roles:
    get:
      tags:
      - role-controller
      operationId: getAllRoles
      parameters:
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageRole'
  /api/products/categories/{categoryName}:
    get:
      tags:
      - product-controller
      operationId: findProductsByCategoryName
      parameters:
      - name: categoryName
        in: path
        required: true
        schema:
          type: string
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: sortBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsePageProduct'
  /api/products/brands/{brandName}:
    get:
      tags:
      - product-controller
      operationId: findProductsByBrandName
      parameters:
      - name: brandName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseListProduct'
  /api/categories/{cateId}/brands:
    get:
      tags:
      - brand-controller
      operationId: getBrandDataByCategory
      parameters:
      - name: cateId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseListBrand'
  /api/cart/{id}:
    get:
      tags:
      - user-controller
      operationId: getShoppingCart
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseShoppingSession'
  /api/cart/{id}/total:
    get:
      tags:
      - user-controller
      operationId: getTotalValues
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseLong'
  /api/account/{id}:
    get:
      tags:
      - user-controller
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'
  /api/cart/{id}/product/{productId}:
    delete:
      tags:
      - user-controller
      operationId: removeItemFromCart
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseObject'
components:
  schemas:
    SliderRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        imageName:
          type: string
    ApiResponseSlider:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Slider'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    Slider:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        imageName:
          type: string
    ImageModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        imageName:
          type: string
        imageByte:
          type: array
          items:
            type: string
            format: byte
        type:
          type: string
    ProductRequest:
      type: object
      properties:
        name:
          type: string
        productCode:
          type: string
        parameters:
          type: string
        content:
          type: string
        actualPrice:
          type: number
          format: double
        quantity:
          type: integer
          format: int32
        productImages:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ImageModel'
        featureImageName:
          type: string
        featureImageByte:
          type: array
          items:
            type: string
            format: byte
        brand_id:
          type: integer
          format: int64
    ApiResponseProduct:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Product'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    Brand:
      type: object
      properties:
        id:
          type: integer
          format: int64
        brandName:
          type: string
        description:
          type: string
        category:
          $ref: '#/components/schemas/Category'
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        categoryImageByte:
          type: array
          items:
            type: string
            format: byte
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        productCode:
          type: string
        parameters:
          type: string
        content:
          type: string
        quantity:
          type: integer
          format: int32
        actualPrice:
          type: number
          format: double
        featureImageName:
          type: string
        featureImageByte:
          type: array
          items:
            type: string
            format: byte
        productImages:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ImageModel'
        brand:
          $ref: '#/components/schemas/Brand'
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        categoryImageByte:
          type: array
          items:
            type: string
            format: byte
    ApiResponseCategory:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Category'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    BrandRequest:
      type: object
      properties:
        brandName:
          type: string
        description:
          type: string
        categoryId:
          type: integer
          format: int64
    ApiResponseBrand:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Brand'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    BannerRequest:
      type: object
      properties:
        name:
          type: string
        content:
          type: string
        imageName:
          type: string
    ApiResponseBanner:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Banner'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    Banner:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        content:
          type: string
        imageName:
          type: string
    CartItemRequest:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64
        shopping_session_id:
          type: integer
          format: int64
    ApiResponseObject:
      type: object
      properties:
        result:
          type: object
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    SignupRequest:
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
    ApiResponseUser:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/User'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        email:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Role'
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ApiResponseJwtResponse:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/JwtResponse'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    JwtResponse:
      type: object
      properties:
        jwtToken:
          type: string
        id:
          type: integer
          format: int64
        username:
          type: string
        roles:
          type: array
          items:
            type: string
    ApiResponsePageUser:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageUser'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PageUser:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/Sort'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
        paged:
          type: boolean
    Sort:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    ApiResponsePageSlider:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageSlider'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PageSlider:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Slider'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    ApiResponsePageRole:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageRole'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PageRole:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    ApiResponsePageProduct:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageProduct'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PageProduct:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    ApiResponseListProduct:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    ApiResponsePageCategory:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageCategory'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PageCategory:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    ApiResponseListBrand:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Brand'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    ApiResponseShoppingSession:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ShoppingSession'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    CartItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          format: int64
    ShoppingSession:
      type: object
      properties:
        id:
          type: integer
          format: int64
        total:
          type: number
          format: double
        cartItems:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    ApiResponseLong:
      type: object
      properties:
        result:
          type: integer
          format: int64
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    ApiResponsePageBrand:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageBrand'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PageBrand:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Brand'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    ApiResponsePageBanner:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/PageBanner'
        errorCode:
          type: string
        message:
          type: object
        responseCode:
          type: integer
          format: int32
    PageBanner:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Banner'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
